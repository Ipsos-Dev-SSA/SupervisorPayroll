@model CallCentreFollowUps.Models.UpdatePasswordModel

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

@{
    ViewBag.Title = "Supervisors List";
    Layout = "~/Views/Shared/_LayoutPayroll.cshtml";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Password</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h2>Update Password</h2>

        <!-- Form to update the password -->
        <form asp-action="UpdatePassword" method="post">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label for="OldPassword">Old Password</label>
                @Html.PasswordFor(m => m.OldPassword, new { @class = "form-control", placeholder = "Enter your old password" })
                @Html.ValidationMessageFor(m => m.OldPassword, "", new { @class = "text-danger" })
            </div>

            <div class="form-group mt-3">
                <label for="NewPassword">New Password</label>
                @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control", placeholder = "Enter your new password" })
                @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger" })
            </div>

            <div class="form-group mt-3">
                <label for="ConfirmNewPassword">Confirm New Password</label>
                @Html.PasswordFor(m => m.ConfirmNewPassword, new { @class = "form-control", placeholder = "Confirm your new password" })
                @Html.ValidationMessageFor(m => m.ConfirmNewPassword, "", new { @class = "text-danger" })
            </div>

            <div class="form-group mt-3">
                <button type="submit" class="btn btn-primary">Update Password</button>
            </div>
        </form>

        <p>Debug TempData: @TempData["ErrorMessage"]</p>

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                @TempData["ErrorMessage"]
            </div>
        }
        <!-- Display SweetAlert message if exists -->
        @if (TempData["Message"] != null)
        {
            var messageType = TempData["Message"].ToString();
            var messageContent = TempData["MessageContent"].ToString();

            <script type="text/javascript">
                // Ensure SweetAlert2 runs after page load
                $(document).ready(function () {
                    Swal.fire({
                        icon: messageType,
                        title: messageType == 'success' ? 'Success!' : 'Error!',
                        text: messageContent
                    });
                });
            </script>
        }
    </div>

    <!-- jQuery and Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.5.0/dist/sweetalert2.all.min.js"></script>
</body>
</html>
